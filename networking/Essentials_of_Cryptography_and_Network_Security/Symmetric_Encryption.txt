                                                                                                   ##                                                                                                    ##
                  +-----------------------------------------------------+                          ##                     +---------------------------------------------------------+                    ##
                  | +-------------------------------------------------+ |                          ##                     | +-----------------------------------------------------+ |                    ##
                  | | Introducing symmetric (conventional) encryption | |                          ##                     | | Working with the Advanced Encryption Standard (AES) | |                    ##
                  | +-------------------------------------------------+ |                          ##                     | +-----------------------------------------------------+ |                    ##
                  +-----------------------------------------------------+                          ##                     +---------------------------------------------------------+                    ##
                                                                                                   ##                                                                                                    ##
                                                                                                   ##                                                                                                    ##
5 ingredients needed:                                                                              ## - To replace DES (20 years on)                                                                     ##
                                                                                                   ##                                                                                                    ##
                                      3. Shared Secret Key                                         ## - Requirements:                                                                                    ##
                                             O-_-_-_                                               ##     ~ Efficient, flexible & simple                                                                 ##
                                                """"                                               ##     ~ Support block size of 128-bits                                                               ##
+-------------+                    +-----------' '----------+                   +-------------+    ##     ~ Support key lengths of 128, 192 & 256-bits                                                   ##
| To:         |                    |                        |                   | To:         |    ##                                                                                                    ##
|             |                   \|/                      \|/                  |             |    ## - Rijndael Algorithm became official standard in 2002                                              ##
| T O P       |               +--------+               +--------+               | T O P       |    ##                                                                                                    ##
| S E C R E T | ------------> | +    - | ------------> | +    - | ------------> | S E C R E T |    ## AES:                                                                                               ##
|             |               | x    % | 4. Ciphertext | x    % |               |             |    ##     ~ Used in all modern apps                                                                      ##
+-------------+               +--------+               +--------+               +-------------+    ##     ~ Not a Fiestel network (in that it doesn't swap sides)                                        ##
 1. Plaintext              2. Encryption            5. Decryption                    Output        ##     ~ Processes entire block through set of 4 main operations (9-11 rounds depending on key length)##
                               Algorithm                Algorithm                                  ##                                                                                                    ##
                                                                                                   ## ENCRYPTION PROCESS (Rijndael Algorithm)                                                            ##
LUCIFER:                                                                                           ##                                                                                                    ##
    ~ Encryption algorithm by IBM                                                                  ##                                     Plaintext (state)                                 +~~~~~~~~~+  ##
    ~ "became" (after tampering by NSA) the: Data Encryption Standard (DES)                        ##                                            |                                          ) INITIAL )  ##
                                             Data Encryption Algorithm (DEA)                       ##                                            |                                          ( ROUND   (  ##
                                                                                                   ##                                     +---------------+                 +------------+  +~~~~~~~~~+  ##
DES:                                                                                               ##                                     | Add round key | <---- XOR ----- | Cipher Key |               ##
    ~ Variation of Fiestel Cipher                                                                  ##                                     +---------------+                 +------------+               ##
    ~ Encrypts 64-bit data using 56-bit key (16 subkeys generated from this key)                   ##                                            |                                                       ##
    ~ Process repeated through 16 rounds of processing                                             ##                                            |                                                       ##
                                                                                                   ##         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ##
    ~ Problem:                                                                                     ##                                            |----------<---------+                     +~~~~~~~~~+  ##
        + Only have 2^56 variations of key (so...compromisation likely)                            ##                                            |                    |                     ) 9 MAIN  )  ##
                                                                                                   ##                                     +---------------+           |                     ( ROUNDS  (  ##
    ~ Solution:                                                                                    ##                                     |   Sub bytes   |           ^                     +~~~~~~~~~+  ##
        + Triple DES (this is slow though...):                                                     ##                                     +---------------+           |                                  ##
            > Block size = 64-bits                                                                 ##         +-------------------+              |                    |                                  ##
            > Key length = 168-bits                                                                ##         | 4 MAIN OPERATIONS |       +---------------+           |                                  ##
                                                                                                   ##         +-------------------+       |  Shift rows   |           |                                  ##
Security of symmetric cryptosystem depends on 2 components:                                        ##                                     +---------------+           ^                                  ##
    1. Key length (longer = better) - Protection of this exists...                                 ##                                            |                    |                                  ##
    2. Algorithm                    - ...not this!                                                 ##                                     +---------------+           |                                  ##
                                                                                                   ##                                     |  Mix columns  |           |                                  ##
                                                                                                   ##                                     +---------------+           |                                  ##
#####################################################################################################                                            |                    ^                                  ##
                                                                                                   ##                                     +---------------+           |                                  ##
                        +----------------------------------------+                                 ##                                     | Add round key |           |                                  ##
                        | +------------------------------------+ |                                 ##                                     +---------------+           |                                  ##
                        | | Making sense of the Feistel Cipher | |                                 ##                                            |                    |                                  ##
                        | +------------------------------------+ |                                 ##                                            |---------->---------+                                  ##
                        +----------------------------------------+                                 ##         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ##
                                                                                                   ##                                            |                                          +~~~~~~~~~+  ##
                                                                                                   ##                                            |                                          ) FINAL   )  ##
- Developed in 1973 by IBM                                                                         ##                                     +---------------+                                 ( ROUND   (  ##
- ALL block ciphers (including DES) mirror this cipher                                             ##                                     |   Sub bytes   |                                 +~~~~~~~~~+  ##
- Adheres to conventional encryption principles                                                    ##                                     +---------------+                                              ##
- Provides:                                                                                        ##                                            |                                                       ##
    ~ Confusion: Hides relationship between plaintext, ciphertext & key                            ##                                     +---------------+                                              ##
    ~ Diffusion: Spreads effect of plaintext (or key bits) over as much of ciphertext as possible  ##                                     |  Shift rows   |                                              ##
                                                                                                   ##                                     +---------------+                                              ##
- Elegant...as provides:                                                                           ##                                            |                                                       ##
    ~ Fast encryption & decryption                                                                 ##                                     +---------------+                                              ##
    ~ Complex subkey algorithm                                                                     ##                                     | Add round key |                                              ##
    ~ Additional security:                                                                         ##                                     +---------------+                                              ##
        + Block size    (larger = better)                                                          ##                                            |                                                       ##
        + Key length    (longer = better)                                                          ##                                           \|/                                                      ##
        + No. of rounds (more = better)                                                            ##         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  ##
                                                                                                   ##                                                                                                    ##
                                                                                                   ##                                                                                                    ##
Generating subkeys...                                                                              ## +-----------+                                                                                      ##
                                                 +---+---+---+---+           +---+---+---+---+     ## | SUB BYTES |                      +--------->--------->--------->--------->---------+             ##
  +---+---+---+---+---+---+ -----------> Key 1 = | 1 | 2 | 3 | 4 |   Key 2 = | 3 | 4 | 5 | 6 |     ## +-----------+                      |                                                 |             ##
  | 1 | 2 | 3 | 4 | 5 | 6 | ----------->         +---+---+---+---+           +---+---+---+---+     ##                                    |                                 Column         \|/            ##
  +---+---+---+---+---+---+ ----------->         +---+---+---+---+           +---+---+---+---+     ## +----+----+----+----+              |                     +---------------------------------------+ ##
       (6 bits of key)                   Key 3 = | 2 | 3 | 4 | 5 |   Key 4 = | 1 | 2 | 5 | 6 |     ## | 24 | ~~ | ~~ | ~~ |              |                     |####|____|____|____|____|_4__|____|____| ##
                                                 +---+---+---+---+           +---+---+---+---+     ## +----+----+----+----+              |                 Row |____|____|____|____|____|____|____|____| ##
                                                                                                   ##   ||                               |                     |____|____|____|____|____|____|____|____| ##
Example (of 1 round):                                                                              ##   |+--------->--------->--------->-+                  +->|_2__|____|____|____|____|_36_|____|____| ##
                                        ~ 1 ~                                                      ##   +--------->--------->--------->--------->--------->-+                  ~ S-BOX ~                 ##
                                  +---------------------+                                          ## +---------+                                                                  |                     ##
                      (Left half) | (1 0 1 1) (1 0 0 0) | (Right half)                             ## | 24 = 36 |<-----------<----------<----------<----------<----------<---------+                     ##
                           |      +---------------------+      |                                   ## +---------+                                                                                        ##
                           |                                   |                                   ##                                                                                                    ##
         +-----+      +---------+                         +---------+      +-----+                 ##                                                                                                    ##
    +--> | L^0 |      | 1 0 1 1 |                         | 1 0 0 0 |      | R^0 |                 ##                                                                                                    ##
    |    +-----+      +---------+                         +---------+      +-----+                 ## +------------+                                                                                     ##
    |                      |                                   |                                   ## | SHIFT ROWS |                                                                                     ##
Represents iteration       |                                   |                                   ## +------------+                                                                                     ##
number (i.e. 0 = 1st)     \|/                                  |                +---------+ Subkey ##                                                                                                    ##
                      +---------+             +---------------------------------| 0 0 0 1 |        ## +----+----+----+----+ (Shift rows the LEFT by what number row you are on - 1...                    ##
                      | 1 0 1 1 |    ~ 3 ~    |                |                +---------+        ## | D4 | E0 | B8 | 1E |  E.g. if row on = 2, shift LEFT by 1...2-1 = 1)                              ##
                      | 0 0 1 1 |<-+          |                |                                   ## +----+----+----+----+                                                                              ##
                      | --XOR-- |  |         \|/     ~ 2 ~     |                                   ## | 27 | BF | B4 | 41 |  Row 2 (-1) becomes...                                                       ##
                      | 1 0 0 0 |  | LCS +---------+           |                                   ## +----+----+----+----+  +----+----+----+----+                                                       ##
                      +---------+  |     | 0 0 0 1 |           |                                   ## | 11 | 98 | 5D | 52 |  | BF | B4 | 41 | 27 |                                                       ##
                ~ 4 ~      |       |     | 1 0 0 0 |<----------+                                   ## +----+----+----+----+  +----+----+----+----+                                                       ##
                           |       |     | --XOR-- |           |                                   ## | AE | F1 | E5 | 30 |  ...as you have shifted all 1 to the left                                    ##
                           |       +-----| 1 0 0 1 |           |                                   ## +----+----+----+----+                                                                              ##
                           |             +---------+           |                                   ##                                                                                                    ##
                           |                                   |                                   ##                                                                                                    ##
                           +------>------+         +------<----+                                   ##                                                                                                    ##
                                         |         |                                               ## +-------------+                                                                                    ##
                           +-------------|----<----+                                               ## | MIX COLUMNS | (Primary source of diffusion)                                                      ##
                           |             +---------->----------+                                   ## +-------------+                                                                                    ##
                           |               ~ 5 ~               |                                   ##                                                                                                    ##
                           |                                   |                                   ## +--         --+     +--     --+   +-  -+ <-------------------------------------------- New Column  ##
                          \|/                                 \|/                                  ## | 02 03 01 01 |     | a0 (D4) |   | b0 |       +---------------------------------- Current column  ##
                      +---------+                         +---------+                              ## | 01 02 03 01 | XOR | a1 (B4) | = | b1 |       |  +------------------------- Circulant MDS Matrix  ##
                      | 1 0 0 0 |                         | 1 0 0 0 |                              ## | 01 01 02 03 |     | a2 (5D) |   | b2 |       |  |                                                ##
                      +---------+                         +---------+                              ## | 03 01 01 02 |     | a3 (30) |   | b3 |       |  |                                                ##
                                                                                                   ## +--         --+     +--     --+   +-  -+       |  |            ~ RULE ~                            ##
* LCS = Left Circular shift                                                                        ##       ^                  ^                     |  |           +----------------------------------+ ##
                                                                                                   ##       |                  |                     |  |           |      ROW        *    COLUMN      | ##
1. Split block into 2 halves (padding may be necessary to make them equal size)                    ##       |                  +---------------------+  |           | (of the Matrix)   (of the State) | ##
2. XOR together the Right half & the corresponding subkey (matches with iteration number)          ##       +-------------------------------------------+           +----------------------------------+ ##
                                                          (i.e. 1st iteration - 1st subkey)        ##                                                                                                    ##
3. Do a Left Circular Shift on the result of that XOR                                              ## Example:                                                                                           ##
4. XOR together the Left half and the result of the LCS                                            ##       +----------------------------------------------------------+                                 ##
5. Swap the Left & Right half (Right half has not changed)                                         ##     ~ | b0 = (02 * D4) XOR (03 * BF) XOR (01 * 5D) XOR (01 * 30) |                                 ##
                                                                                                   ##       +----------------------------------------------------------+                                 ##
                                                                                                   ##     ~ Convert hex to binary & then multiply them together                                          ##
#####################################################################################################                                                                 +-----------------+                ##
                                                                                                   ##     ~ If left-most bit is 1 in original value, then XOR with... | 0 0 0 1 1 0 1 1 | (after         ##
                          +---------------------------------------+                                ##                                                                 +-----------------+ multiplication)##
                          | +-----------------------------------+ |                                ##                                                                                                    ##
                          | | Dissecting block & stream ciphers | |                                ##           1 0 1 0 1 0 0 0 (D4 * 02 = 1A8 (removed left most 4-bits to remove padding))             ##
                          | +-----------------------------------+ |                                ##       XOR 0 0 0 1 1 0 1 1 (...as left-most bit was 1 (D4 = 10101000))                              ##
                          +---------------------------------------+                                ##           ---------------                                                                          ##
                                                                                                   ##           1 0 1 1 0 0 1 1                                                                          ##
- 2 types of symmetric encryption algorithm:                                                       ##                                                                                                    ##
    ~ Block cipher  (e.g. DES/AES)                                                                 ##                                                                                                    ##
    ~ Stream cipher (e.g. RC4/SEAL)                                                                ##                                                                                                    ##
                                                                                                   ## +---------------+                                                                                  ##
BLOCK CIPHERS                                                                                      ## | ADD ROUND KEY |                                                                                  ##
    ~ Process text in fixed-size (64/128-bit) blocks (& produce block of ciphertext of equal size) ## +---------------+                                                                                  ##
    ~ If memory added to these, become a Stream Cipher                                             ##                                                                                                    ##
                                                                                                   ## :                   :          +----------------- Column currently on referred to as W^i           ##
STREAM CIPHERS                                                                                     ## :    Cipher key     :          |                  (previous column = W^i-1 ...and so on...)        ##
    ~ Fast, use less code & operate on stream of data (encrypting 1 bit/byte at a time)            ## :                   :         \|/                                                                  ##
      (take plaintext & XOR with a psuedo random key stream)                                       ## +----+----+----+----+       +----+----+----+----+ Words in positions of multiples of 4...          ##
    ~ Used to secure wireless comms                                                                ## | 2B | 28 | AB | 09 |       | ?? |    |    |    | (1st of each block)                              ##
                                                                                                   ## +----+----+----+----+       +----+----+----+----+ ...are calculated by:                            ##
Cipher Modes of operation                                                                          ## | 7E | AE | F7 | CF | ----> | ?? |    |    |    |                                                  ##
    ~ Chaining mode:              Defines how stream is generated                                  ## +----+----+----+----+ ----> +----+----+----+----+     1. Applying RotWord & SubBytes to previous   ##
                                  (how plaintext, key & ciphertext generate stream of cipher text) ## | 15 | D2 | 15 | 4F | ----> | ?? |    |    |    |        (W^i-1)                                   ##
    ~ Electronic Code Book (ECB): Simplest mode in that there is no feedback                       ## +----+----+----+----+       +----+----+----+----+     2. XORing this result to 4th previous        ##
                                  (each 64-bit block is encoded independently but uses same key)   ## | 16 | A6 | 88 | 3C |       | ?? |    |    |    |        (W^i-4)                                   ##
                                                                                                   ## +----+----+----+----+       +----+----+----+----+        ... + round constant (Rcon)               ##
                                  +-----------+                                      +-----------+ ##   W0   W1   W2   W3           W4   W5   W6   W7   <-- Positions of the words                       ##
                                  | Plaintext | --------------- Same --------------- | Plaintext | ##  /|\                                                                                               ##
                                  +-----------+                                      +-----------+ ##   |                                                                                                ##
                                        |                                                  |       ##   +------------------------- Column can be seen as 32-bit word so here refer to columns using 'W'  ##
                                       \|/                                                \|/      ##                                                                                                    ##
                                  +-----------+   +-----+                  +-----+   +-----------+ ## +----+                 +----+                  +----+                                              ##
                                  | Encryption|<--| Key | ----- Same ----- | Key |-->| Encryption| ## | 09 |                 | CF |                  | 8A |                                              ##
                                  | Algorithm |   +-----+                  +-----+   | Algorithm | ## +----+                 +----+                  +----+                                              ##
                                  +-----------+                                      +-----------+ ## | CF |                 | 4F |                  | 84 |                                              ##
                                        |                                                  |       ## +----+ --- RotWord --> +----+ --- SubBytes --> +----+                                              ##
                                       \|/                                                \|/      ## | 4F | (shift up by 1) | 3C |                  | EB |                                              ##
                                  +-----------+                                      +-----------+ ## +----+      /|\        +----+                  +----+                                              ##
                                  | Ciphertext| --------------- Same --------------- | Ciphertext| ## | 3C |       |         | 09 |                  | 01 |                                              ##
                                  +-----------+                                      +-----------+ ## +----+       |         +----+                  +----+                                              ##
                                                                                                   ##              |                                                                                     ##
                                                                                                   ##              +----------------------------------- This is the same transformation for every round  ##
    ~ Cipher Block Chaining ---+                                                                   ##                                                   (up by 1)                                        ##
    ~ Cipher Feedback          |------------- Add randomness to messages to provide extra security ##                                                                                                    ##
    ~ Output Feedback       ---+                                                                   ## +----+     +----+     +----+ <--------- Rcon calculated with:                                      ##
                                                                                                   ## | 2B |     | 8A |     | 01 |                                                                       ##
Cipher Block Chaining (CBC)                                                                        ## +----+     +----+     +----|            +---------------------------------+ (Only 1st byte ever    ##
    ~ Takes plaintext & does XOR (before encryption) with PREVIOUS encrypted block                 ## | 7E |     | 84 |     | 00 |            | Rcon(i) = [x^(i-1), 00, 00, 00] |  effected)             ##
                                                                                                   ## +----+ XOR +----+ XOR +----+            +---------------------------------+                        ##
              +-----------+                 +-----------+                                          ## | 15 |     | EB |     | 00 |                                                                       ##
              | Plaintext |                 | Plaintext |                                          ## +----+     +----+     +----+            <--- This is round 1, so i = 1                             ##
              +-----------+                 +-----------+                                          ## | 16 |     | 01 |     | 00 |                 (Rcon(1) = [01, 00, 00, 00])                          ##
                    |                             |                                                ## +----+     +----+     +----+                                                                       ##
    +----+          |                             |                                                ##                                              ...where x = 2                                        ##
    | IV |---------XOR          +---->---->---->-XOR           +---->---->---->- ...               ##                                                                                                    ##
    +----+          |           |                 |            |                                   ##                                                                                                    ##
    +-----+   +-----------+     | +-----+   +-----------+      |                                   ##                                                                                                    ##
    | Key |-->| Encryption|     | | Key |-->| Encryption|      |                                   ##                                                                                                    ##
    +-----+   | Algorithm |     | +-----+   | Algorithm |      |                                   ## +---------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+  ##
              +-----------+     |           +-----------+      |                                   ## |       i       |   1   |   2   |   3   |   4   |   5   |   6   |   7   |   8   |   9   |   10  |  ##
                    |---->---->-+                  |---->---->-+                                   ## +---------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+  ##
                   \|/                           \|/                                               ## |               |  [01] |  [02] |  [04] |  [08] |  [10] |  [20] |  [40] |  [80] |  [1B] |  [36] |  ##
              +-----------+                 +-----------+                                          ## |    RCON[i]    |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  ##
              | Ciphertext|                 | Ciphertext|                                          ## |     (hex)     |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  ##
              +-----------+                 +-----------+                                          ## |               |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  [00] |  ##
                                                                                                   ## +---------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+  ##
    ...because each ciphertext depends on all plaintext blocks up until that point...              ## |    DECIMAL    |   1   |   2   |   4   |   8   |   16  |   32  |   64  |  128  |   27  |   54  |  ##
    an Initialisation Vector (IV) is needed                                                        ## +---------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+  ##
                /|\                                                                                ## |  CALCULATION  | 2^(0) | 2^(1) | 2^(2) | 2^(3) | 2^(4) | 2^(5) | 2^(6) | 2^(7) | 2^(8) | 2^(9) |  ##
                 |                                                                                 ## +---------------+-------+-------+-------+-------+-------+-------+-------+-------+-------+-------+  ##
                 +----- (Encrypted block (dummy) of random data used as 1st 64-bit block to begin) ##                                                                                    /|\             ##
                                                                                                   ##                                                                                     |              ##
                                                                                                   ## Because Rijndael's finite field only has 256 elements... ---------------------------+              ##
                                                                                                   ## ...the max hex number that can exist without being reduced in 0x99 (255)                           ##
Cipher Feedback (CFB)                                                                              ## Because 2^(8) is 256, it has to be reduced                                                         ##
    ~ Looks like CBC but uses encrypted text of previous block BEFORE XOR                          ##                                                                                                    ##
      (plaintext (encrypted/not) does not contribute to encryption of next block)                  ## ...after reduction, 2^(9) does not need to be reduced as it's only double (x2) of 2^(8)            ##
                 +----+                                                                            ## Because 2^(8) reduced is 0x1B (27), this is no way near 256 so can simply carry on as before...    ##
                 | IV |                                                                            ## Look at it like the Hex value keeps increasing with every round that passes, when 0x100 (255)      ##
                 +----+         +---->---->---->-+           +---->---->---->- ...                 ## is likely to be exceeded, reduce it using the finite field and then start again                    ##
                    |           |                |           |                                     ##                                                                                                    ##
    +-----+   +-----------+     |          +-----------+     |                                     ##                                                                                                    ##
    | Key |-->| Encryption|     |          | Encryption|     |                                     ##  +----+       +----+   +----+ Words that are not multiple of 4, calculated by XORing previous word ##
    +-----+   | Algorithm |     |          | Algorithm |     |                                     ##  | 28 |       | A0 |   | 88 | (W^(i-1)) ...with the one 4 places before it (W^(i-4))               ##
              +-----------+     |          +-----------+     |                                     ##  +----+       +----+   +----+                                                                      ##
                    |---->---->-+                |---->---->-+                                     ##  | AE |       | FA |   | 54 | E.g.                                                                 ##
    +-----------+   |            +-----------+   |                                                 ##  +----+  XOR  +----+ = +----+     ~ W5 = W4 XOR W1                                                 ##
    | Plaintext |--XOR           | Plaintext |--XOR                                                ##  | D2 |       | FE |   | 2C |                                                                      ##
    +-----------+   |            +-----------+   |                                                 ##  +----+       +----+   +----+                                                                      ##
                   \|/                          \|/                                                ##  | A6 |       | 17 |   | B1 |                                                                      ##
              +-----------+                +-----------+                                           ##  +----+       +----+   +----+                                                                      ##
              | Ciphertext|                | Ciphertext|                                           ## (W^(i-4))    (W^(i-1))                                                                             ##
              +-----------+                +-----------+                                           ##                                                                                                    ##
                                                                                                   ##                                                                                                    ##
                                                                                                   ########################################################################################################
                                                                                                   ##
Output Feedback (OFB)                                                                              ##
    ~ Takes block cipher & creates a synchronous stream cipher                                     ##
    ~ Similar to CFB as uses encrypted text BEFORE it's XORed (same diagram)                       ##
                                                                                                   ##
                                                                                                   ##
RC4                                                                                                ##
    ~ Stream cipher dev by John Rivest                                                             ##
    ~ Rivest Cipher generates a psuedo-random key string                                           ##
    ~ WEP (Wireless Equivalent Privacy) uses this algorithm (most vulnerable security)             ##
    ~ Uses:                                                                                        ##
        > 40/140-bit key: Used to init state vector/S-box with 256 entries                         ##
                          (Stream generated after init cycling through all 256 vals of S-Box)      ##
        > 24-bit IV:      Used to seed (start) key stream generator                                ##
                          Too small (streams will be repeated)                                     ##
                          Sent in plaintext                                                        ##
                                                                                                   ##
                                                                                                   ##
#####################################################################################################
